DONE

	Define set of locations

	Bring haversine function across

	Implement latency to datacenter function (approximate for now...)

	Advertise as available to datacenters < 50ms latency for the first n seconds.	

TODO

	Design simplest possible matchmaking algorithm.

	First, hardcode to games of size n. for now n = 4.

	Now, define an acceptable cost to be considered for a game in the first 60 seconds, eg 50.

	"Anything <= than 50ms is fine".

	Next, "volunteer" each active player in matchmaking to a set of matching players per-datacenter (hash), when the datacenter is <= 50ms cost.

	Now we need to determine the algorithm for matching n players together.

	First, for the given set of players in the queue per-datacenter, how many unique combinations of possible matches are there?

	How does this grow vs. n, where n is the number of players in the per-datacenter queue.

	It's almost certainly going to be the combinatorial growth...

	---------

	Assume we cannot just do it brute force then?

	The goal is then to be greedy, to quickly match players together, not with absolutely ideal latency, but to quickly build the groups that are "acceptable".

	Actually optimizing latency is of combinatorial complexity, surely.

	---------

	So take the whole list of players waiting on the datacenter. All players in the datacenter waiting have acceptable latency to that datacenter.

	Sort on time spent looking for a match. Process in order of longest time spent looking for a match, to least.

	This way if we miss a player out in one pass, we'll get them on the next pass...

	---------


