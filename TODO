DONE

	Implement the widening in the warm body state

	Dummy out latency maps per-city to all zeros

	Load the data in for latency maps per-datecenter by name

	Implement code to load the latency map and transform into array of float32 values.

	Finalize set of cities for simulator

	Implement code to get latency map value at lat/long, with clamping for latitude in range [-90,+90] during lookup, and wraparound for longitude such that values -1 turns into 360-1, and values 361 turns into 1, etc.

	Implement code to look up the latency given a datacenter and player lat/long, first looking into the latency map, and then if the latency map entry is 0.0 using a conservative estimate according to speed of light * 3 at distance.

	Split apart into "Expand" and "WarmBody" states.

	Fixed a bug in expansion calculation as function of t.

	Transform the latency map so that it "widens" via a filter, eg. take average of neighbours, for any lat/long square that is 0.0 and has any non-0.0 neighbours, on load.

TODO

	Make sure we are looking up the latency correctly in the image.

	For example, try to get latency to sanjose from the sanjose bin -- at the lat/long of san jose, and make sure we are hitting the correct pixel.

	We probably at least have to invert the latitude

	-------

	Work out a process for transforming raw input bin files into the filtered bin files.

	This process needs the lat/long for each datacenter to work...

	Stick datacenters into a csv file?